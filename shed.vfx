require alpha.vfx
require obj.vfx
require core.vfx
require lib/gradient.vfx
require scripts/ui.vfx
ui root push

0 value dragee
0 value this
0 value hoveree
variable snapping

\ - Viewport config
: matte x v@ 2p>s gamew zoom sf* gameh zoom sf* al_set_clipping_rectangle ;
: center
    winw 2 /  gamew zoom sf* 2 / -
    winh 64 - 2 /  gameh zoom sf* 2 / -  2s>p viewport -> x v!
    zoom f>p dup viewport -> sx v!
;
viewport as :> draw> center matte zoom f>p dup sx v! ;

\ - Scripting
motif var constructor var ser var nam /obj to /basis
: (physics>) r> phy ! ;
: physics> postpone (physics>) discard-sinline ; immediate
: ?literal state @ if postpone literal then ;
: 1object body> constructor ! pen v@ 2s>p x v! physics> vx v@ 2delta* x v+! ;
: object:
    create here 0 , :noname swap !
    does> me *child { dup 1object @ execute me } ;
: kill -> en off ;
: named
    >in @ >r bl word find if
        2dup >name swap -> nam !
        over swap >body @ !
        r> drop 
    else
        drop r> >in !
        dup value latest ctrl>nfa over -> nam !
    then ;
object: *generic ;
: ??? me ;

\ - Stage
viewport { *generic named stage }

\ - Quickly reload a set file
create reload$ 64 allot
: reload cr ." ==================== RELOAD ====================" reload$ count included ;
s" shed.vfx" reload$ place
: fget 0 parse reload$ place s" .vfx" reload$ append reload$ count included ;

\ - Dragging
: zoom/ >r zoom sf/ r> zoom sf/ ;
: +drag walt 2s>p zoom/ x v+! ;
: bounding w v@ parent -> sx v@ 2p* ;
: dragging alt? if stage else dragee then { +drag } ;
: tsnap 8. + dup 16. mod - ;
: ?snap snapping @ if tsnap swap tsnap swap else 2i then ;
: stop-dragging alt? if stage else dragee then ?dup 0; { x v@ ?snap x v! } 0 to dragee ;
: gbox x v@ w v@ area v*m 2swap v*m 2swap ;
: (hovering) me each> hide @ ?; w v@ or 0<> first @ or 0; mouse 2s>p gbox inside? if me to hoveree then +t recurse -t ;
: hovering 0 to hoveree (hovering) ;
: pick to this ;
: drag to dragee ;

\ - UI extensions
: ?delete this ?dup 0; kill 0 pick 0 drag 0 to hoveree root { reckon } ;
:noname [ is app-events ]
    ALLEGRO_EVENT_DISPLAY_SWITCH_IN happened? if
    then
    ALLEGRO_EVENT_KEY_DOWN happened? if
        ekey <f5> = if s" reload" evaluate then
        ekey <del> = if ?delete then
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_DOWN happened? if
        hoveree ?dup if dup pick drag then
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_UP happened?
    ALLEGRO_EVENT_DISPLAY_SWITCH_OUT happened? or if
        stop-dragging
    then
;

\ - Serialize
variable indent
: +i  4 indent +! ;
: -i  -4 indent +! ;
: cri cr indent @ 0 ?do space loop ;
: .xy x v@ 2p>s swap . . ;
: ?.wh w v@ or if w vp? ." w v! " then ;
: .constructor constructor @ >name count type space ;
: .{ ." { " ;
: .} ." } " } ;
: .}r first @ if cri then .} ;
: ?.named nam @ ?dup if ." named " count type space then ;
: (o.) .xy ." at " .constructor ?.named .{ ?.wh ;
: o. { (o.) .} ;
: o.r cri { (o.) ser @ ?execute space ['] .}r >r me each> +i me recurse -i ;
: figpath z[ ." figures/" type ." .vfx" ]z zcount ;
: save figpath f[ viewport o.r ]f ;
: save-to 0 parse save ;
: load 0 pick viewport clear viewport { 0 parse figpath included } ;
: ser> r> ser ! ;

\ - Info
: stext @color >r 1 1 +at dup black text -1 -1 +at r> color text ;
: a+t
    +m identity
    parent @ begin ?dup while
        dup { x v@ 2p>f  sx v@ 2p>f } 0e
            m2 al_build_transform  m m2 al_compose_transform
        -> parent @
    repeat
    m al_use_transform
;
: tiny a+t x v@ v*m 2p>s at -t identity ;
: info +m tiny 0 -33 +at sherry32.fnt font ! z[ me o. ]z stext -m ;
: outline a+t x v@ 2p>s at w v@ 2p>s rect -t ;

\ - UI extension
uiext as *generic named shed as
:noname
    act>
        dragee alt? 1 mheld? and or if dragging else root { hovering } then
    draw>
        ui? 0;
        hoveree ?dup if { yellow outline } then
        this ?dup if { red outline white info } then
; execute
