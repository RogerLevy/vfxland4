\ win32catch \ enables catching windows exceptions
\ Win32ExceptThrow
require lib/counter.vfx
require lib/mersenne.vfx
require lib/strout.vfx
require lib/fixed.vfx
require lib/csv.vfx
require lib/files.vfx
require lib/fileout.vfx

320 value gamew
240 value gameh
60e fconstant framerate

\ - Misc
: @+ dup cell+ swap @ ;
: ?literal state @ if postpone literal then ;
: ?; s" if exit then" evaluate ; immediate
: 0; s" 0= if exit then" evaluate ; immediate
: sf@+ dup sf@ cell+ ;
: sf-! cell- dup sf! ;
: f>ds 0 >r rp@ sf! r> ;
synonym | locals|
: :: :noname  [char] ; parse evaluate  postpone ;  execute ;
synonym >> rshift
synonym << lshift
: sf/ s>f fswap f/ f>s ;
: sf* s>f f* f>s ;
: f[ write[ ;
: ]f ]write ;

\ - Arrays
: get  swap cells + @ ;
: set  swap cells + ! ;

\ - 2D Vectors p1
: v@ dup @ swap 4 + @ ;
: v! dup >r 4 + ! r> ! ;
: v+! dup >r 4 + +! r> +! ;
: v, swap , , ;
: 2+ rot + >r + r> ;
: 2* rot * >r * r> ;
: 2/ rot swap / >r / r> ;
: 2mod rot swap mod >r mod r> ;
: 2negate swap negate swap negate ;
: 2s>f swap s>f s>f ;
: x@ @ ;
: y@ cell+ @ ;
: vp? v@ 2p. ;

\ - Ranges
: area 2over 2+ ;
: 2rnd rnd swap rnd swap ;
: overlap? 2swap 2rot rot > -rot < and >r rot > -rot < and r> and ;
: inside? 2>r 2>r 2dup 2r> 2r> overlap? ;

\ - Input
: held? kbs0 swap al_key_down 0<> ;
: kdelta dup kbs0 swap al_key_down kbs1 rot al_key_down - ;
: pressed? kdelta 1 = ;
: letgo? kdelta -1 = ;
: shift? 215 held? 216 held? or ;
: ctrl? 217 held? 218 held? or ;
: alt? 219 held? 220 held? or ;
: mouse ms0 ALLEGRO_MOUSE_STATE.x @ ms0 ALLEGRO_MOUSE_STATE.y @ ;
: mickey ms1 ALLEGRO_MOUSE_STATE.x @ ms1 ALLEGRO_MOUSE_STATE.y @ ;
: 2- rot swap - >r - r> ;
: walt mouse mickey 2- ;
: mheld? ms0 ALLEGRO_MOUSE_STATE.buttons @ and 0<> ;
: mdelta dup mheld? 1 and  swap ms1 ALLEGRO_MOUSE_STATE.buttons @ and 0< 1 and - ;
: mpressed? mdelta 1 = ;
: mletgo? mdelta -1 = ;
: poll poll-keyboard poll-mouse ;

\ - Matrix stack
create mstk 16 cells 16 * allot
create temp 16 cells allot
variable mp
: m mp @ 15 and 16 cells * mstk + ; 
: +m m 1 mp +! m swap al_copy_transform ;
: -m -1 mp +!  m al_use_transform ;
: transform  temp al_build_transform  temp m al_compose_transform  m temp al_copy_transform  m al_use_transform ;
: identity  m al_identity_transform  m al_use_transform ;

\ - Graphics
create pen 0 , 0 ,
create fore 0e sf, 0e sf, 0e sf, 0e sf,
create backdrop 0e sf, 0e sf, 0e sf, 1e sf,
: at pen v! ;
: +at pen v+! ;
: at@ pen v@ ;
: at@f pen v@ 2s>f ;
: 4f@ sf@+ sf@+ sf@+ sf@ ;
: 4f! 4 cells + sf-! sf-! sf-! cell- sf! ;
: rect 1e f>ds >r  at@f  pen v@ 2+ 2s>f  fore 4f@  r> al_draw_rectangle ;
: rectf pen v@ 2+  at@f 2s>f  fore 4f@  al_draw_filled_rectangle ;
: fcolor fore 4f! ;
: cls backdrop 4f@ al_clear_to_color ;
: c dup 24 >> s>f 255e f/ ;
: color c 8 << c 8 << c 8 << c drop fcolor ;
: b >r sf@+ 255e f* f>s r> or ;
: @color fore 0 b 8 << b 8 << b 8 << b nip ;

\ - Bitmaps
: ?null ?dup 0= if r> 2drop exit then ;
: fblit at@f swap al_draw_bitmap ;
: blit ?null 0 swap fblit ;
: bmpw al_get_bitmap_width ;
: bmph al_get_bitmap_height ;
: bmpwh dup bmpw swap bmph ; 
: loadbmp al_load_bitmap ;
: subbmp pen v@ 2swap al_create_sub_bitmap ;
: hold al_hold_bitmap_drawing ;
: -bmp ?null al_destroy_bitmap ;
: onto ?null al_set_target_bitmap ;
: backbuf display al_get_backbuffer ;
: opaque ALLEGRO_ADD ALLEGRO_ONE ALLEGRO_ZERO al_set_blender ;
: transparent ALLEGRO_ADD ALLEGRO_ALPHA ALLEGRO_INVERSE_ALPHA al_set_blender ;
: bmpwrite onto opaque blit backbuf onto transparent ;
: rblit swap >r  dup bmpwh 2 2 2/ 2s>f  at@f  r> p>f deg>rad  swap al_draw_rotated_bitmap ;

\ - Colors
: red 1e 0e 0e 1e fcolor ;
: green 0e 1e 0e 1e fcolor ;
: blue 0e 0e 1e 1e fcolor ;
: yellow 1e 1e 0e 1e fcolor ;
: magenta 1e 0e 1e 1e fcolor ;
: cyan 0e 1e 1e 1e fcolor ;
: brown 0.5e 0.25e 0e 1e fcolor ;
: pink 1e 0.5e 1e 1e fcolor ;
: orange 1e 0.5e 0e 1e fcolor ;
: purple 0.5 0e 1e 1e fcolor ;
: white 1e 1e 1e 1e fcolor ;
: black 0e 0e 0e 1e fcolor ;
: dk dup sf@ 2e f/ sf!+ ;
: br dup sf@ 2e f* sf!+ ;
: <d fore dk dk dk dk drop ; 
: <b fore br br br br drop ;

\ - Text
variable font  builtin-font font !
: z[ zstr[ ;
: ]z ]zstr ;
: >z z[ type ]z ;
: text >r font @ fore 4f@ at@f 0 r> al_draw_text ;

\ - Delta
1e fvalue delta
0 0 2value lastTime
1000e framerate f/ 10000e f* fvalue fus
: !delta  ( - )
    \ al_wait_for_vsync drop
    dcounter 2dup lastTime d- d>f fus f/ to delta  to lastTime ;
: delta* delta f>p p* ;
: 2delta* delta f>p p* swap delta f>p p* swap ;
