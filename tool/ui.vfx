reference ui
reference repl

variable editmode
\ 0 value kbfocus
true value ui-halt?

motif var eh /obj to /basis
: (respond>) r> eh ! ; : respond> postpone (respond>) discard-sinline ; immediate

z" sys/Mx437_SperryPC_8x16.ttf" #16 3 al_load_ttf_font
    constant sherry16.fnt 
z" sys/Mx437_SperryPC_8x16.ttf" #32 3 al_load_ttf_font
    constant sherry32.fnt 

\ : .fs fdepth | d | d 0 ?do d 1 - i - fpick f. loop ;
: h. ." $" base @ swap hex . base ! ;
: .s depth | d | d 0 ?do d 1 - i - pick . loop cr ; \ .fs ;
: p.s depth | d | d 0 ?do d 1 - i - pick p. loop cr ; \ .fs ;
: ?type ?dup 0= if drop else type then ;
: .tib ." >" tib #tib @ ?type ." _" ;
: try catch dup .throw if 2drop then ;
: obey >vfx >display cr tib #tib @ ['] evaluate try 0 #tib ! ;
: ?halt repl -> vis @ ui-halt? and game -> halt ! ;
: toggle-repl repl -> vis toggle ?halt ;
: ?charkey  
    case
        ( bksp ) 8 of #tib @ 0; -1 #tib +! exit endof
        ( tab ) 9 of exit endof
        ( enter ) 13 of obey exit endof
        ( esc ) 27 of exit endof
    dup-endcase
    dup 32 < over 127 = or if drop exit then
    tib #tib @ + c! 1 #tib +!
;

: responses halt @ ?; eh @ ?execute me each> recurse ;

create e /ALLEGRO_EVENT allot&erase
: happened? e ALLEGRO_EVENT.type @ = ;
: the-char e KEYBOARD_EVENT.unichar @ ;
: the-key e KEYBOARD_EVENT.keycode @ ;
: events
    begin  queue e al_get_next_event  while
        root { responses }
        ALLEGRO_EVENT_DISPLAY_CLOSE happened? if
            bye
        then
        ALLEGRO_EVENT_DISPLAY_SWITCH_OUT happened? if
            reset-keyboard reset-mouse
        then
        ALLEGRO_EVENT_DISPLAY_RESIZE happened? if
            display al_acknowledge_resize
        then
    repeat
;
: repl-events
    ALLEGRO_EVENT_KEY_CHAR happened? if
        the-char ?charkey
    then
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <f3> = if game { halt @ invert dup halt ! to ui-halt? } then
    then
;


game value uime
variable uiosp
bpage uios uios uiosp !
: nr 0 pen cell+ @ fonth + at ;
: -matte 0 0 winw winh al_set_clipping_rectangle ;
: bar blue winw 64 rectf ;
: ]z. ]z text ; 
: bar-text sherry32.fnt font ! white z[ .s ]z. nr z[ .tib ]z. ;

: (events)
    osp @ >r uiosp @ osp !
    events
    osp @ uiosp ! r> osp !
; 

object: *ui
    act> (events) \ pause
    draw> -matte ;
object: *repl
    act>
        <tab> pressed? if toggle-repl then
        0 winh 64 - s>p x v! 
    draw> bar bar-text
    respond>
        vis @ 0;
        me >r uime as
        repl-events 
        me to uime r> as
;
: rs reset-stacks ;

' noop is EditOnError
\ ?halt 

static {
    *ui named ui {
        *repl named repl { }
    }
}
