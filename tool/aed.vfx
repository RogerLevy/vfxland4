require obj/tilemap.vfx
require obj/tile.vfx
require lib/filetypes.vfx

\ - Editor variables
obj animations
0 value kf#
reference editor
reference anmc
reference pspr
variable cti
create ctw 1 , 1 ,

\ - Editor actions
: anm anmc -> first @ ;
: ckf kf# anm nth-child ;
: hide-each each> me hide ;
: sel anm hide-each  anm nth-child reveal ;
: kf! 0 anm #children wrap to kf#  kf# sel ;
: +kf kf# + kf! ;
: duplicate ckf clone ckf insert-after 1 +kf ;
: tcenter ctw v@ 8. 8. 2p* 2- ;
: lay ckf { anm { mouse s>local } tcenter at *tile { cti @ ti ! ctw v@ tile:dims! ?snap } } ;
: ?lay editor { over? } 0; lay ;
: small sherry16.fnt font ! ;
: big sherry32.fnt font ! ;

\ - Editor components 1/2
: (status)
    z[ kf# 1 + . ." / " anm #children . ]z white stext nr
    z[ ." Tile: " cti @ . ]z white stext nr
    z[ ." XY: " mouse anmc { s>local } swap . . ]z white stext nr
    z[ ." CTW: " ctw v@ swap . . ]z stext nr
;
: tbank-act act> over? 0;
    1 mpressed? if mouse s>local 16. 16. 2p/ 16 * + cti ! then ;
: .anm anm ?dup if .name then ;
: tbank-draw draw>
    sdims 2dup $00000080 color rectf
    -1 -1 +at 2 2 2+ white rect 1 1 +at
    tbank 256 256 subbmp dup blit -bmp ;

: aed-ser ser> ." post: " anm { nam @ if me .name ." edit " then } kf# . ." kf! " ." me tools push " ;
defer editor-respond

: ?2tsnap 2s>p snapping @ if tsnap swap tsnap swap then 2i 2p>s ;

: ghost mouse s>local tcenter ?2tsnap at $ffffff80 color ctw v@ cti @ tiles ;
: ?ghost over? 0; ghost ;

\ - Editor components 2/2
: crosshairs 64 0 +at 0 128 black line -64 64 +at 128 0 black line 64 0 +at ;
object: *preview 3. 3. sx 2! draw> crosshairs ;
object: *editor 3. 3. sx 2! editor-respond draw> crosshairs ?ghost ;
object: *status draw> big z[ .anm ]z white stext 0 32 +at small (status) ;
object: *aed aed-ser ;
object: *timeline ;
object: *keyframe ; 
object: *pspr ser> tl -> nam @ 0; tl @ .name spd p? ." animate " ;
object: *tbank 256. 256. w v! tbank-act tbank-draw ;

\ Save/load
: edit anmc -> first @ ?dup if animations push then anmc push 0 kf! pspr { anm 0.25 animate } ;
: (anm-save) anm tlpath osave ;
: ?ext ?dup if -ext pad place s" .tl.vfx" pad append pad count then ;
: chooser z" fig/tl" z" Load Timeline" z" *.vfx" 0 file-dialog ?ext ;
: anm-load chooser ?dup if oload edit then ;
create untitled$ ," UNTITLED.TL"
: new 0 0 at *timeline untitled$ name { *keyframe { } me } edit ;
: rename pad place s" .tl" pad append anm pad name drop ;
: ?clone anm -> nam @ if anm clone edit then ;
: anm-saveas chooser ?dup if -path -ext ?clone rename (anm-save) then ;
: untitled? anm -> nam @ count untitled$ count compare 0= ;
: anm-save untitled? if anm-saveas else (anm-save) then ;

\ - Editor layout
tools {
    0 0 at *aed named aed {
        0 0 at *toolbox { ` AED` data!
            0 32 at *generic {
                0 0 at *status { } 
                0 64 at *generic {
                    0 0 at *editor named editor { 128. 128. w v! [bolted]
                        64 64 at *generic named anmc { }
                    }
                    512 0 at *preview named preview { 
                        64 64 at *pspr named pspr { } 
                    }
                    0 winh 2 / at *toolbox { ` Tiles` data!
                        0 32 at *tbank named tselector { _bolted aon }
                    }
                    300 winh 2 / at *toolbox { ` Tools` data!
                        0 32 at *generic {
                            0 0 at *button { ` snapping toggle` data! }
                        }
                    }
                }
            }
        }
    }
}

aed -> first @ :noname each> [locked] me recurse ; execute

\ - Editor controls (besides shed-provided actions)
:noname [ is editor-respond ]
    respond>
    editmode @ ?;
    repl -> vis @ ?;
    ALLEGRO_EVENT_KEY_CHAR happened? if
        the-char case
            [char] z of -1 +kf endof
            [char] x of 1 +kf endof
            [char] a of *keyframe ckf insert-after 1 +kf endof
            ( bksp ) 8 of anm #children 1 > if ckf remove then endof
        endcase
        the-key case
            <del> of this delete endof
            <left> of -1. 0 this -> x v+! endof
            <right> of 1. 0 this -> x v+! endof
            <up> of 0 -1. this -> x v+! endof
            <down> of 0 1. this -> x v+! endof
        endcase
    then
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key case
            <space> of ?lay endof
            <s> of ctrl? if shift? if anm-saveas else anm-save then then endof
            <l> of ctrl? if anm-load then endof
            <o> of ctrl? if anm-load then endof
            <n> of ctrl? if new then endof
            <d> of ctrl? if duplicate then endof
        endcase
    then
    0 +kf 
;
editor as editor-respond

0.75e fdup fdup 1e backdrop 4f!

new