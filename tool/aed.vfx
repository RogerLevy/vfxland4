require shed.vfx
require lib/animate.vfx
require obj/tilemap.vfx
require obj/tile.vfx
require lib/filetypes.vfx

obj animations

\ - Editor variables
0 value kf#
reference editor
reference anmc
reference pspr
variable cti

\ - Editor actions
: anm anmc -> first @ ;
: ckf kf# anm nth-child ;
: hide-each each> hide on ;
: sel anm hide-each  anm nth-child -> hide off ;
: kf! 0 anm #children wrap to kf#  kf# sel ;
: +kf kf# + kf! ;
: duplicate ckf clone ckf insert-after 1 +kf ;
: spos x v@ 2p>s ;
: lay ckf { mouse editor { spos } 2- 3. 3. 2p/ 8 8 2- at *tile { cti @ ti ! ?snap } } ;
: small sherry16.fnt font ! ;
: big sherry32.fnt font ! ;

\ - Editor components 1/2
: (status)
    z[ kf# 1 + . ." / " anm #children . ]z white stext nr
\    z[ tool .name ]z white stext nr
;
: tbank-act act> mouse 2s>p x v@ w v@ area inside? if
    1 mpressed? if mouse spos 2- 16. 16. 2p/ 128 * + cti ! then then ;
: .anm anm ?dup if ." - " .name then ;
: aed-ser ser> ." post: " anm .name ." edit " kf# . ." kf! " ." me tools push " ;
defer editor-respond

\ - Editor components 2/2
: crosshairs 0 -64 +at 0 128 black line -64 64 +at 128 0 black line 64 0 +at ;
object: *preview 3. 3. sx 2! draw> crosshairs ;
object: *editor 3. 3. sx 2! editor-respond draw> crosshairs ;
object: *status draw> small (status) ;
object: *aed aed-ser draw> -matte big z[ ." AED " .anm ]z white stext ;
object: *timeline ;
object: *keyframe ; 
object: *pspr ser> tl @ .name spd p? ." animate " ;
object: *tbank 2048. 2048. w v! tbank-act draw> tbank blit ;

\ Save/load
: edit anmc -> first @ ?dup if animations push then anmc push 0 kf! pspr { anm 0.25 animate } ;
: (save) anm tlpath osave ;
: ?ext ?dup if -ext pad place s" .vfx" pad append pad count then ;
: chooser z" fig/tl" z" Load Timeline" z" *.vfx" 0 file-dialog ?ext ;
: anm-load chooser ?dup if oload edit then ;
: new *timeline { *keyframe { } me } edit ;
: rename pad place s" .tl" pad append anm pad name drop ;
: ?clone anm -> nam @ if anm clone edit then ;
: anm-saveas chooser ?dup if -path -ext ?clone rename (save) then ;
: anm-save anm -> nam @ if (save) else anm-saveas then ;

\ - Editor layout
tools {
    0 0 at *aed named aed {
        winw 0.16666 p* 200 at *preview named preview { 
            0 0 at *pspr named pspr { } 
        }
        winw 0.6 p* 200 at *editor named editor {
            0 0 at *generic named anmc { }
            64 -64 at *status { } 
        }
        0 winh 2 / at *tbank named tselector { _bolted aon }
    }
}

\ - Editor controls (besides shed-provided actions)
:noname [ is editor-respond ]
    respond>
    editmode @ ?;
    ALLEGRO_EVENT_KEY_CHAR happened? if
        the-char case
            [char] z of -1 +kf endof
            [char] x of 1 +kf endof
            [char] a of *keyframe ckf insert-after endof
            ( bksp ) 8 of anm #children 1 > if ckf remove then endof
        endcase
        the-key case
            <del> of ?delete endof
            <left> of -1. 0 this -> x v+! endof
            <right> of 1. 0 this -> x v+! endof
            <up> of 0 -1. this -> x v+! endof
            <down> of 0 1. this -> x v+! endof
        endcase
    then
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key case
            <space> of lay endof
            <s> of ctrl? if shift? if anm-saveas else anm-save then then endof
            <l> of ctrl? if anm-load then endof
            <o> of ctrl? if anm-load then endof
            <n> of ctrl? if new then endof
            <d> of ctrl? if duplicate then endof
        endcase
    then
    0 +kf 
;
editor as editor-respond

0.75e fdup fdup 1e backdrop 4f!

new