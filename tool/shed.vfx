0 value dragee
root value this
0 value hoveree
variable snapping
0 value workspace
variable editmode
reference static
reference editmenu
reference shed

1 bit _bolted bit _locked bit _sealed value _attributes

\ - Scripting
motif var ser var attr var post +basis
: (physics>) r> phy ! ;
: physics> postpone (physics>) discard-sinline ; immediate
:noname [ is 1object ] con ! pen v@ 2s>p x v! physics> vx v@ 2delta* x v+! ;
: copy *slot { me /slot move   linkage erase   me } ;
: (*clone) ( orig new ) | p |
    -> first @ begin ?dup while
        dup dup copy dup p push
        recurse
        -> next @
    repeat ;
: clone dup copy dup >r (*clone) r> ;
: a? attr @ and 0<> ;
: aoff invert attr @ and attr ! ;
: aon attr @ or attr ! ;
: replace dup >r insert r> kill ;
: from -> x v@ p>s at ;
: rtransform
    me begin ?dup while
        dup { x v@ 2p>f  sx v@ 2p>f } 0e
            m2 al_build_transform
            m m2 al_compose_transform
        -> parent @
    repeat
    m al_use_transform
;
: ascale/ parent @ ?dup if { recurse } then sx v@ 2p/ ;
: ascale* sx v@ 2p* parent @ ?dup if { recurse } then ;
: a+t +m identity rtransform ;
: abox a+t 0 0 v*m w v@ ascale* 2over 2+ -t ;
: >local abox 2drop 2- ascale/ ;
: s>local 2s>p >local 2p>s ;
: hide -> vis off ;
: reveal -> vis on ;
: container: 0 0 at *generic named ;
: [locked] _locked aon ;
: [bolted] _bolted aon ;
: [sealed] _sealed aon ;
: over? mouse 2s>p abox inside? ;
: is-static? begin -> parent @ ?dup while dup static = ?dup if nip exit then repeat 0 ; 
: editable? dup 0;  is-static?  not workspace static = or ;
: tsnap dup abs 4. + dup 8. mod - swap 0< if negate then ;
: 2pround 2p>f fround fswap fround f>p f>p ; 
: ?snap _bolted a? ?; x v@ snapping @ if tsnap swap tsnap swap else 2pround then x v! ;
: upstage dup -> parent @ unshift ;
: downstage dup -> parent @ push ;

\ - Serialize
variable indent
: +i  4 indent +! ;
: -i  -4 indent +! ;
: cri cr indent @ 0 ?do space loop ;
: .xy x v@ 2pround 2p>s swap . . ;
: ?.en en @ 0= if ." en off " then ;
: ?.vis vis @ 0= if ." vis off " then ;
: ?.halt halt @ if ." halt on " then ;
: ?.a attr @ ?dup if h. ." attr ! " then ; \ <- could be more future-proof
: ?.wh w v@ or if w vp? ." w v! " then ;
: ?.s sx v@ or 1. <> if sx vp? ." sx v! " then ;
: .con con @ ?dup if >name count type space else ." *GENERIC " then ;
: .{ ." { " ;
: .} ." } " } ;
: .}r first @ if cri then .} ;
: ?.named nam @ if ." named " me .name then ;
: (o.) .xy ." at " .con ?.named .{ ?.en ?.vis ?.halt ?.a ?.wh ?.s ;
: o. { (o.) .} ;
: o.c { (o.) ['] .}r >r me each> cr ."     " me o. ;
: o.r cri { (o.) ser @ ?execute space ['] .}r >r me each> +i me recurse -i ;

\ Save/Load
: osave >r dup -> nam @ count r> name>path 2dup 2>r f[ o.r ]f cr ." Saved to " 2r> type ;
: save ' execute figpath osave ;
: oload 2dup type me { included } me -> last @ ;
0 value dst
: transplant-children to dst each> me dst push ;
: params { linkage cell+ nip dup me + /slot rot - } ;
: overwrite
    >r r@ clear
    dup params r@ params drop swap move
    dup r@ transplant-children
    delete r> ;
: ?existing search-context if ." EXISTING" execute else 0 then ;
: ?replace ?dup 0; overwrite ;
: postload post @ ?dup if count evaluate then me each> recurse ;
: aload 2dup -path   ?existing >r   oload   r> ?replace { postload me } ;
: load bl parse figpath name>path aload to this ;
: ser> r> ser ! ;
: post: here aligned post ! 0 parse $, ;

\ - Dragging
\ : ?ws-scale dragee workspace = if workspace -> sx v@ 2p* then ;
: ?parent-scale parent @ ?dup if { ascale/ } then ;
: +drag _bolted a? ?; the-walt 2s>p ?parent-scale x v+! ;
: ?dragging dragee ?dup 0; { +drag } ;
: plop dragee ?dup 0; { ?snap } 0 to dragee ;
: m*box x v@ w v@ sx v@ 2p* 2over 2+ v*m 2swap v*m 2swap ;
: (hovering) me each> visible? 0; w v@ or 0<> first @ or 0; 
    the-mouse 2s>p m*box inside? if me to hoveree then +t recurse -t ;
: hover +t (hovering) -t ;

\ - Figure Editor 1/3
: stext @color >r 1 1 +at dup black text -1 -1 +at r> color text ;
: tiny a+t 0 0 v*m 2p>s at -t identity ;
: (info) +m tiny 0 -33 +at sherry32.fnt font ! z[ me o. ]z stext -m ;
: outline 0 0 at w v@ 2p>s rect ;
: a-outline a+t outline -t ;
: descendant? swap { begin parent @ dup while over = if } drop -1 exit then parent @ as repeat nip ( 0 ) } ;
: (outlines) each> +t outline me recurse -t ;
: outlines
    | p |
    p { a+t $00ff0080 color me (outlines) -t }
    hoveree editable? if
        hoveree p descendant? if
            hoveree { yellow a-outline } 
        then
    then
    this editable? if 
        this p descendant? if
            this { red a-outline (info) }
        then
    then
;

\ - Figure Editor 2/3
: +zoom
    workspace { 
        sx @ >r   0.25 * r@ + 0.25 2. clamp dup   sx v!
        mouse 2s>p >local sx v@ 2p*   1. sx @ r> p/ - dup   2p*   x v+!
    }
;
: can-delete? | it |
    it 0= if 0 exit then 
    it editable? not if cr ." Cannot delete static objects when not editing the static layer." 0 exit then 
    it { _locked a? } if cr ." Object is locked. Cannot delete!" 0 exit then
    -1 ;
: unpick root to this ; \  0 to dragee 0 to hoveree ;
: delete-this this can-delete? if this delete   unpick then ;
: ?bring dragee 0; dragee workspace = 0; dragee workspace push ;
: editmenu? shed descendant? editmenu @ and ;
: select dup editmenu? not if to this else drop then ;
: ?pickdrag ?dup 0; dup select to dragee ;

\ Clicking
create omx 0 , 0 ,
0 value target
: click? ALLEGRO_EVENT_MOUSE_BUTTON_UP happened? mouse omx v@ d= and ;

\ Edit menu
require tool/widgets.vfx
: toggle-editmenu
    editmenu toggle
    editmenu {
        mouse winw winh w v@ 2p>s 2- 2min   2s>p x v!
        me downstage
        me open-toolbox
    }
;

\ - Figure Editor 3/3
: shed-events
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <del> = if delete-this then
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_DOWN happened? if
        the-mbutton 1 = if
            hoveree ?pickdrag
        then
    then
    click? the-mbutton 2 = and if
        hoveree ?dup if to target then
        toggle-editmenu 
    then
;
c: *shed draw> editmode @ 0; -matte 2 2 at magenta winw 3 - winh 3 - rect ;
c: *info draw> editmode @ 0; workspace outlines ;

\ - Workspace
: ws-var var does> @ workspace + ;
motif ws-var ws-static
: 1workspace [locked] ;
c: *workspace 1workspace draw> -matte ;
: disable-each each> me off ;

\ - Shed layout
root {
    container: workspaces {
        *workspace named ws1  { me -> ws-static on }
        *workspace named ws2  { me -> ws-static on }
        *workspace named ws3  { me -> ws-static on }
        *workspace named ws4  { me -> ws-static on }
        *workspace named ws5  { me -> ws-static on }
        *workspace named ws6  { me -> ws-static on }
        *workspace named ws7  { me -> ws-static on }
        *workspace named ws8  { me -> ws-static on }
        *workspace named ws9  { me -> ws-static on }
        *workspace named ws10 { me -> ws-static on }
        *workspace named trash { me -> ws-static on }
        *workspace named static { me -> ws-static on }
    }
    *shed named shed {
        *info named info { }
        *toolbox named editmenu { ` -- EDIT --` me off 0 32 at *panel } { 8 8 at *generic } { } 
    }
}

: ?static ws-static @ static ! ;
: toggle-static static workspace <> if ws-static toggle then   ?static ;
: toggle-editmode editmode toggle   editmode @ not if editmenu off then   ( editmode @ ws-static ! )   ?static ;
: switch workspaces disable-each   dup to workspace on   ?static   ( ?bring ) ;
ws1 switch

\ - Global events
: ecat e ALLEGRO_EVENT.type @ 10 / ;
create workspace-table ws1 , ws2 , ws3 , ws4 , ws5 , ws6 , ws7 , ws8 , ws9 , ws10 , trash , static ,

: common-events
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <f1> >=
        the-key <f12> <= and if
            the-key <f1> - workspace-table [] @ switch
        then
        the-key <tab> = if repl toggle then
        the-key <s> = alt? and if toggle-static then
        the-key <e> = alt? and if toggle-editmode then
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_DOWN happened? if
        mouse omx v!
        the-mbutton 2 =
        the-mbutton 1 = alt? and   or if
            workspace to dragee
        then
    then
    ALLEGRO_EVENT_MOUSE_AXES happened? if
        the-wheel ?dup if +zoom then
        0 to hoveree
        workspace { hover }
        static @ if static { hover } then
        editmenu @ if shed { hover } then
        ?dragging
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_UP happened?
    ALLEGRO_EVENT_DISPLAY_SWITCH_OUT happened? or if
        plop
    then

    \ Pass events to objects
    ecat 0 = if \ joystick
        workspace { respond }
    then
    ecat 2 = if \ mouse
        alt? not if
            workspace static <> if static { respond } then
            editmenu @ if editmenu { respond } then
        then
    then
;

:noname [ is events ]
    common-events
    repl @ if
        ecat 1 = if repl-events then \ keyboard
        ecat 2 = if \ mouse
            editmode @ if shed-events else alt? not if workspace { respond } then then
        then
    else
        editmode @ if shed-events else alt? not if workspace { respond } then then
    then
;

\ Edit menu actions
-sin
: ?root this root = if r> drop cr ." No selection." then ;
: ?locked this { _locked a? } if r> drop cr ." Cannot do that on a locked object." then ;
: ?bolted this { _bolted a? } if r> drop cr ." Cannot do that on a bolted object." then ;
: button: *button { >in @ bl parse data! } >in ! : ;
: localize { mouse 2s>p >local } this -> x v! ;
: [newrow] last @ { break } ;
: ?sealed target { _sealed a? } if r> drop cr ." Target is sealed." then ;

editmenu -> first @ {
    button: [BRING] ?root ?locked ?bolted   this workspace push   workspace localize    ;
    : ?bring { me workspace descendant? not if [bring] else   me this over insert-after   this { -> parent @ localize } then } ;
    button: [CLONE] ?root   this >r   this clone select   r> ?bring ;
    [newrow]
    button: [CLEAR] ?root ?locked ?sealed   this clear ;
    button: [TRASH] ?root ?locked ?sealed   this trash push   unpick ;
    [newrow]
    button: [ATTACH] ?root ?locked ?bolted   target 0;   ?sealed   this target push   8. 8. this -> x v! ;
    button: [DETACH] ?root ?locked ?bolted   target 0;   ?sealed   target workspace push ;
    [newrow]
    button: [UPSTAGE] ?root ?bolted   this upstage ;
    button: [DOWNSTAGE] ?root ?bolted   this downstage ;
    [newrow]
    button: [LOCK] ?root this   { _locked aon } ;
    button: [UNLOCK] ?root this   { _locked aoff } ;
    [newrow]
    button: [BOLT] ?root ?locked   this { _bolted aon } ;
    button: [UNBOLT] ?root ?locked   this { _bolted aoff } ;
    [newrow]
    button: [SEAL] ?root ?locked   this { _sealed aon } ;
    button: [UNSEAL] ?root ?locked   this { _sealed aoff } ;
    [newrow]
    button: [DESELECT] ?root   unpick ;
    *button { ` snapping toggle` break }
}
+sin