0 value dragee
root value this
0 value hoveree
variable snapping
0 value workspace
variable editmode
reference static

1 bit _bolted bit _locked value _attributes

\ - Scripting
motif var ser var attr var post /obj to /basis
: (physics>) r> phy ! ;
: physics> postpone (physics>) discard-sinline ; immediate
:noname [ is 1object ] con ! pen v@ 2s>p x v! physics> vx v@ 2delta* x v+! ;
: copy *slot { me /slot move   linkage erase   me } ;
: (*clone) ( orig new ) | p |
    -> first @ begin ?dup while
        dup dup copy dup p push
        recurse
        -> next @
    repeat ;
: clone dup copy dup >r (*clone) r> ;
: a? attr @ and 0<> ;
: aoff invert attr @ and attr ! ;
: aon attr @ or attr ! ;
: replace dup >r insert r> kill ;
: from -> x v@ p>s at ;
: a+t
    +m identity
    me begin ?dup while
        dup { x v@ 2p>f  sx v@ 2p>f } 0e
            m2 al_build_transform
            m m2 al_compose_transform
        -> parent @
    repeat
    m al_use_transform
;
: ascale/ parent @ ?dup if { recurse } then sx v@ 2p/ ;
: ascale* sx v@ 2p* parent @ ?dup if { recurse } then ;
: abox a+t 0 0 v*m w v@ ascale* area -t ;
: >local abox 2drop 2- ascale/ ;
: s>local 2s>p >local 2p>s ;
: hide -> vis off ;
: reveal -> vis on ;
: container: 0 0 at *generic named ;
: [locked] _locked aon ;
: [bolted] _bolted aon ;
: over? mouse 2s>p abox inside? ;
: is-static? begin -> parent @ ?dup while dup static = ?dup ?; repeat 0 ; 
: editable? dup 0; is-static? not workspace static = or ;
: tsnap dup abs 8. + dup 16. mod - swap 0< if negate then ;
: ?snap _bolted a? ?; x v@ snapping @ if tsnap swap tsnap swap else 2i then x v! ;

\ - Serialize
variable indent
: +i  4 indent +! ;
: -i  -4 indent +! ;
: cri cr indent @ 0 ?do space loop ;
: .xy x v@ 2p>s swap . . ;
: ?.en en @ 0= if ." en off " then ;
: ?.vis vis @ 0= if ." vis off " then ;
: ?.halt halt @ if ." halt on " then ;
: ?.a attr @ ?dup if h. ." attr ! " then ; \ <- could be more future-proof
: ?.wh w v@ or if w vp? ." w v! " then ;
: ?.s sx v@ or 1. <> if sx vp? ." sx v! " then ;
: .con con @ ?dup if >name count type space else ." *GENERIC " then ;
: .{ ." { " ;
: .} ." } " } ;
: .}r first @ if cri then .} ;
: ?.named nam @ if ." named " me .name then ;
: (o.) .xy ." at " .con ?.named .{ ?.en ?.vis ?.halt ?.a ?.wh ?.s ;
: o. { (o.) .} ;
: o.c { (o.) ['] .}r >r me each> cr ."     " me o. ;
: o.r cri { (o.) ser @ ?execute space ['] .}r >r me each> +i me recurse -i ;

\ Save/Load
: osave >r dup -> nam @ count r> name>path 2dup 2>r f[ o.r ]f cr ." Saved to " 2r> type ;
: save ' execute figpath osave ;
: oload 2dup type me { included } me -> last @ ;
0 value dst
: transplant-children to dst each> me dst push ;
: params { linkage cell+ nip dup me + /slot rot - } ;
: overwrite
    >r r@ clear
    dup params r@ params drop swap move
    dup r@ transplant-children
    delete r> ;
: ?existing search-context if ." EXISTING" execute else 0 then ;
: ?replace ?dup 0; overwrite ;
: postload post @ ?dup if count evaluate then me each> recurse ;
: aload 2dup -path   ?existing >r   oload   r> ?replace { postload me } ;
: load bl parse figpath name>path aload to this ;
: ser> r> ser ! ;
: post: here aligned post ! 0 parse $, ;

\ - Dragging
: ?ws-scale dragee workspace = if workspace -> sx v@ 2p* then ;
: +drag _bolted a? ?; the-walt 2s>p ascale/ ?ws-scale x v+! ;
: ?dragging dragee ?dup 0; { +drag } ;
: plop dragee ?dup 0; { ?snap } 0 to dragee ;
: m*box x v@ w v@ sx v@ 2p* area v*m 2swap v*m 2swap ;
: (hovering) me each> visible? 0; w v@ or 0<> first @ or 0; 
    the-mouse 2s>p m*box inside? if me to hoveree then +t recurse -t ;
: hover +t (hovering) -t ;

\ - Figure Editor 1/3
: stext @color >r 1 1 +at dup black text -1 -1 +at r> color text ;
: tiny a+t 0 0 v*m 2p>s at -t identity ;
: (info) +m tiny 0 -33 +at sherry32.fnt font ! z[ me o. ]z stext -m ;
: outline a+t 0 0 at w v@ 2p>s rect -t ;
: outlines
    hoveree dup editable? if { yellow outline } else drop then
    this dup editable? if { red outline (info) } else drop then
;

\ - Figure Editor 2/3
: +zoom
    workspace { 
        sx @ >r   0.25 * r@ + 0.25 2. clamp dup   sx v!
        mouse 2s>p >local sx v@ 2p*   1. sx @ r> p/ - dup   2p*   x v+!
    }
;
: can-delete? | it |
    it 0= if 0 exit then 
    it editable? not if cr ." Cannot edit static objects when not editing the static layer." 0 exit then 
    it { _locked a? } if cr ." Object is locked. Cannot delete!" 0 exit then
    -1 ;
: unpick root to this 0 to dragee 0 to hoveree ;
: delete-this this can-delete? if this delete   unpick then ;

\ - Figure Editor 3/3
: shed-events
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <del> = if delete-this then
    then
;
c: *shed draw> editmode @ 0; 0 0 at $00ff0020 color winw winh rectf ;
c: *info draw> editmode @ 0; outlines ;

\ - Workspace
: ws-var var does> @ workspace + ;
motif ws-var ws-static
: 1workspace [locked] ;
c: *workspace 1workspace draw> -matte ;
: disable-each each> me off ;

\ - Shed layout
root {
    container: workspaces {
        *workspace named ws1  { me -> ws-static on }
        *workspace named ws2  { me -> ws-static on }
        *workspace named ws3  { me -> ws-static on }
        *workspace named ws4  { me -> ws-static on }
        *workspace named ws5  { me -> ws-static on }
        *workspace named ws6  { me -> ws-static on }
        *workspace named ws7  { me -> ws-static on }
        *workspace named ws8  { me -> ws-static on }
        *workspace named ws9  { me -> ws-static on }
        *workspace named ws10 { me -> ws-static on }
        *workspace named ws11 { me -> ws-static on }
        *workspace named static { me -> ws-static on }
    }
    *shed named shed {
        *info named info { }
    }
}

: ?static ws-static @ static ! ;
: toggle-static static workspace <> if ws-static toggle then   ?static ;
: switch workspaces disable-each   dup to workspace on   ?static   shed workspace insert-after   shed on   unpick ;
ws1 switch

: ?pickdrag hoveree ?dup 0; dup to this to dragee ;

\ - Global events
: ecat e ALLEGRO_EVENT.type @ 10 / ;
create workspace-table ws1 , ws2 , ws3 , ws4 , ws5 , ws6 , ws7 , ws8 , ws9 , ws10 , ws11 , static ,
:noname [ is events ]
    \ Edit Mode only stuff
    editmode @ if shed-events then
    
    \ Common stuff
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <f1> >=
        the-key <f12> <= and if
            the-key <f1> - workspace-table [] @ switch
        then
        the-key <tab> = ctrl? not and shift? not and if repl toggle then
        the-key <tab> = shift? and if toggle-static then
        the-key <tab> = ctrl? and if editmode toggle then
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_DOWN happened? if
        the-mbutton 2 = if
            workspace to dragee
        else
            ?pickdrag 
        then
    then
    ALLEGRO_EVENT_MOUSE_BUTTON_UP happened?
    ALLEGRO_EVENT_DISPLAY_SWITCH_OUT happened? or if
        plop
    then
    ALLEGRO_EVENT_MOUSE_AXES happened? if
        the-wheel ?dup if +zoom then
        0 to hoveree
        static { hover }
        workspace { hover }
        ?dragging
    then
    
    \ Pass events to objects
    ecat 0 = if \ joystick
        workspace { respond }
    then
    ecat 1 = if \ keyboard
        repl @ if repl else workspace then { respond }
    then
    ecat 2 = if \ mouse
        editmode @ not if
            workspace { respond }
        then
        workspace static <> if static { respond } then
    then
;
