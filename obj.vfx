\ - Object stack
create os  $100 allot
variable >os 
: >o >os @ $ff and os + ! 4 >os +! ;
: o> -4 >os +! >os @ $ff and os + @ ;

\ - Structs
: field create over , +  does> @ + ;

\ - Addressing
0 value me
: as to me ;
: { me >o as ;
: } o> as ;
: ->  ' >body @ ?literal s" +" evaluate ; immediate
: require me { require } ;
: include me { include } ;
: included me { included } ;

\ - Vars
0 value /obj
0 value /basis
: ofield /obj swap field to /obj does> @ me + ;
: var cell ofield ;
: motif /basis to /obj ;

\ - Double-linked tree
var next var prev var first var last var parent
include lib/dltree.vfx
: remove dlremove ;
: push dlpush ;
: unshift dlunshift ;
: insert dlinsert ;
: each dleach ;
: each> r> swap dleach ;
: empty dlclear ;

\ - Basis
var en var x var y var w var h var vx var vy
var beh var drw var phy
/obj to /basis
defer children

\ - Instancing
: init pen v@ 2s>p x v! en on ;
: *child here 256 allot&erase dup rot push dup { init } ;
: obj create here as 256 allot&erase init ;

\ - Basic actions
: reckon
    first @ {  begin  me while
        next @ >r
            en @ 0= if  me recurse  me remove  then
        r> as
    repeat } ;
: ?execute ?dup 0; catch .throw ;
: draw x v@ 2p>s at  drw @ ?execute  children ; 
: act beh @ ?execute  me each>  en @ 0;  recurse ;
: physics phy @ ?execute  me each>  en @ 0;  recurse ;
: ?draw en @ 0; draw ;
: draw> r> drw ! ;
: act> r> beh ! ;
: +t +m x v@ 2p>f mtranslate ;
: -t -m ;
:noname [ is children ] first @ 0; +t ['] ?draw me each -t ;