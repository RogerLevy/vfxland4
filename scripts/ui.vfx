obj ui  me root push

true value ui?

z" data/consolab.ttf" #16 3 al_load_ttf_font constant consolas 

\ - History
variable hbuf variable s variable l# variable #lines
: init-hbuf 16 allocate drop hbuf ! ; 
: >hbuf s @ >r dup s +! hbuf @ s @ resize drop dup hbuf ! r> + swap move ;
: top hbuf @ s @ l# @ 0 ?do 10 scan 1 /string loop drop ;
: ?type dup if type else 2drop then ;
: nl 0 pen cell+ @ 16 + at ;
: lines ( a # - )
    s @ swap 0 ?do
        text[ 10 csplit ?type ]text
        nl 1 /string over c@ 0= if unloop 2drop exit then
    loop 2drop
;
: history 1 1 at black top 100 lines 0 0 at white top 100 lines ;

\ - History Device
: Emit-history  drop  >r rp@ 1 >hbuf r> drop ;
: Type-history  drop  >hbuf ;
: CR-history  10 swap emit-history  1 #lines +! ;
create history-vectors
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' Emit-history ,
  ' drop ,
  ' Type-history ,
  ' CR-history ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
  ' drop ,
create histdev 0 , history-vectors ,
0 value old-dev
: history[  op-handle @ to old-dev  histdev op-handle ! ;
: ]history  old-dev op-handle ! ; 

\ - REPL
\ : .fs fdepth | d | d 0 ?do d 1 - i - fpick f. loop ;
: h. base @ swap hex . base ! ;
: .s depth | d | d 0 ?do d 1 - i - pick h. loop ; \ .fs ;
: ?type ?dup 0= if drop else type then ;
: .tib ." >" tib #tib @ ?type ." _" ;
: try catch dup .throw if 2drop then ;
: obey history[ cr tib #tib @ ['] evaluate try 0 #tib ! ]history ;
: toggle ui? not to ui? ui? if ui root push else ui remove then ;
: ?charkey  
    case
        ( bksp ) 8 of #tib @ 0; -1 #tib +! exit endof
        ( tab ) 9 of exit endof
        ( enter ) 13 of obey exit endof
        ( esc ) 27 of exit endof
    end-case
    tib #tib @ + c! 1 #tib +!
;

\ - Event pump
create e /ALLEGRO_EVENT allot&erase
: etype? e ALLEGRO_EVENT.type @ = ;
: events
    begin  queue e al_get_next_event  while
        ALLEGRO_EVENT_DISPLAY_CLOSE etype? if
            bye
        then
        ALLEGRO_EVENT_KEY_CHAR etype? if
           e KEYBOARD_EVENT.unichar @ ?charkey
        then
\         ALLEGRO_EVENT_MOUSE_AXES etype? if
\            e MOUSE_EVENT.dz @ ?dup if ?wheel then
\         then
    repeat
;

\ - Define UI behavior
ui value uime
: nr 0 pen cell+ @ 16 + at ;
: bar blue winw 32 rectf ;
: bar-text consolas font ! white text[ .s ]text nr text[ .tib ]text ;
: ui-draw draw> midentity history 0 winh 32 - at bar bar-text ;
: ui-act act> uime { events me to uime } ;
ui as ui-act ui-draw
: ui-toggle <tab> pressed? if toggle then ;
obj mgmt  me root unshift  :: act> ui-toggle ;

\ - Init
: rs reset-stacks ;
: init-ui 0 #tib ! rs ;

' noop is EditOnError 
init-hbuf

\ - Widgets

\ - Load/save

