
\ - Easing directions
( startval change. ratio. -- val )
:noname ; constant EASE-IN
:noname  negate 1.0 + >r swap over + swap negate r> ; constant EASE-OUT
:noname 
    dup 0.5 < if
        2* swap 2/ swap
    else
        swap 2/ rot over + -rot swap 0.5 - 2* [ ease-out compile, ]
    then ;
constant EASE-IN-OUT

\ - Easing curves
\ all these describe the "in" animations, transformed by EASE-OUT et al.
( startval change. ratio. -- val )
\ exponential formula: c * math.pow(2, 10 * (t / d - 1)) + b;
\ quadratic formula: c * (t /= d) * t + b

: (overshoot) >r dup dup r@ 1.0 + p* r> - p* p* p* + ;

:noname p* + ;                                           constant LINEAR     
:noname 1.0 - 10.0 p* 2e p>f f**  f>p p* + ;             constant EXPONENTIAL
:noname 90.0 p* 90.0 - psin 1.0 + p* + ;                 constant SINE       
:noname dup p* p* + ;                                    constant QUADRATIC  
:noname dup p* dup p* p* + ;                             constant CUBIC      
:noname dup p* dup p* dup p* p* + ;                      constant QUARTIC    
:noname dup p* dup p* dup p* dup p* p* + ;               constant QUINTIC    
:noname dup p* 1.0 swap - psqrt 1.0 - p* negate + ;      constant CIRCULAR   
:noname 1.70158 (overshoot) ;                            constant OVERSHOOT  

\ - Tween object
motif var dir var adr var xt var ctx var ease var n1 var n2 var s1 var spd

: upd xt @ if ctx @ { adr @ xt @ ?execute } else adr @ ! then ; 
: curval n1 @ n2 @ over - s1 @ 1. min dir @ execute ease @ execute ;
: step spd @ delta* s1 +! ;
: ?done s1 @ 1. >= if me kill then ;
object: *tween parent @ ctx ! act> step curval upd ?done ;

\ - Tweening
( ease dir adr n2 len - tween )
: tween *tween { 1. swap p/ framerate f>p p/ spd ! n2 ! adr ! dir ! ease ! adr @ @ n1 ! me } ;

