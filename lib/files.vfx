0 value file1

: r/o[  ( a c - )
    cr ." Reading " 2dup type r/o open-file abort" Open file error" to file1 ;

: w/o[  ( a c - )
    cr ." Writing " 2dup type 2dup w/o open-file if
        w/o create-file abort" Open file error"
    else  2drop  then  to file1 ;

: ]file  ( - )
    file1 close-file drop ; \ abort" Close file error" ;

: bytes-left  ( - n )
    file1 file-size abort" Get file size error" drop file1 file-position
    abort" Get file position error" drop - ;

: repos  ( n - )
    0 file1 reposition-file abort" Reposition file error" ;

: read  ( adr bytes - )
    file1 read-file abort" Read file error" drop ;

: write ( adr bytes - )
    file1 write-file abort" Write file error" ;

0 value mm 
: (read>) ( $ c - <code> )  ( a c - )
    r/o[ bytes-left 1 + allocate throw
        dup to mm bytes-left 2dup read  r> execute
        mm free throw
    ]file ;
: read> postpone (read>) discard-sinline ; immediate
: (z) over swap + 0 swap c! ;
: zread> postpone (read>) discard-sinline postpone (z) ; immediate

create crlf 2 c, $0d c, $0a c, 
: (lines>) ( a c - <code> ) ( a c - )
    begin over >r crlf count search while
        over r> swap over - r@ execute
        2 /string
    repeat
    r> drop
    dup if  r@ execute  else  2drop  then
    r> drop ;
: lines> postpone (lines>) discard-sinline ; immediate

: ending ( addr len char -- addr len )
   >r begin  2dup r@ scan
      ?dup while  2swap 2drop  #1 /string
   repeat  r> 2drop ;
   
: -ext ( a n -- a n ) [char] . csplit 2swap 2drop ;

\ Windows:
: slashes  2dup  over + swap do  i c@ [char] / = if  [char] \ i c!  then  #1 +loop ; 
: -filename ( a n -- a n )  slashes 2dup  [char] \ ending  nip - ;
: -path ( a n -- a n )   slashes  [char] \ ending  0 max ;

synonym file-exists fileExist? 
: ?exist ( a c - a c )
    2dup file-exists not if
        cr type -1 abort"  not found"
    then ;
    
: @f 0 sp@ 4 read ;
: h@f 0 sp@ 2 read ;
