reference repl

motif var eh +basis
: (respond>) r> eh ! ; : respond> postpone (respond>) discard-sinline ; immediate
: respond halt @ ?; eh @ ?execute me each> recurse ;

z" sys/data/Mx437_SperryPC_8x16.ttf" #16 3 al_load_ttf_font
    constant sherry16.fnt 
z" sys/data/Mx437_SperryPC_8x16.ttf" #32 3 al_load_ttf_font
    constant sherry32.fnt 

: h. ." $" base @ swap hex . base ! ;
: .s depth | d | d for d 1 - i - pick . loop cr ; \ .fs ;
: p.s depth | d | d for d 1 - i - pick p. loop cr ; \ .fs ;
: ?type ?dup 0= if drop else type then ;
: .tib ." >" tib #tib @ ?type counter 20 / 8 and if ." _" then ;
: obey >vfx >display   cr tib #tib @ ?type   ."  >>> "   ['] interpret catch .throw   refill drop ;
: ?charkey  
    alt? if drop exit then
    case
        ( bksp ) 8 of #tib @ 0; -1 #tib +! exit endof
        ( tab ) 9 of exit endof
        ( enter ) 13 of obey exit endof
        ( esc ) 27 of exit endof
    dup-endcase
    dup 32 < over 127 = or if drop exit then
    tib #tib @ + c! 1 #tib +!
;

root value uime
variable uiosp
bpage uios uios uiosp !
: repl-events
    me >r uime in
    osp @ >r uiosp @ osp !
    ALLEGRO_EVENT_KEY_CHAR happened? if
        the-char ?charkey
    then
    osp @ uiosp ! r> osp !
    me to uime r> in
;

: bar blue winw 64 rectf ;
: ]z. ]z text ; 
: bar-text sherry32.fnt font !   white z[ .s ]z.   nr   z[ .tib ]z. ;

c: *repl
    act>
        0 winh 64 - s>p x v!
    draw>
        me parent @ push \ always on top
        -matte bar bar-text
;

root {
    *repl named repl { }
}

\ - Global events
:noname [ is events ]
    ALLEGRO_EVENT_KEY_DOWN happened? if
        the-key <tab> = if repl toggle then
    then
    repl-events
;